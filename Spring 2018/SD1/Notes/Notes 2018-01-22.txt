Senior Design Notes 2018-01-22

Wednesday Quiz on ch1-5 of Extreme Programming
Mondays: Turn in Stories and TPS reports

Project Files Should Include:
    - README
        Include commands, how to run (with make), explain subdirectories
    - Spikes (directory)
        Spikes are prototypes or tests.
            - README
                Name of subdirectories and one line desc of spikes
Example of spikes for the quad solver program:
    - Make program really quick as a test
        In this program directory, have README, makeifle, quadratic files
    - gcc
        Always use -pedantic and -Wall switches. Can also use -std=g99
        In the readme, if there are known warnings that are to be ignored, explain this.
    - integers
        Know something about formatting IO. 
        Be aware of range of numbers needed (int, long int, long long int, signed, etc.)
            char=8bit, int=32, long int=64, etc
        a (operator) b
            If result is too large to store, the overflow truncates to the smaller data type so you lose data.
    - floating types (IEEE-FP)
        Normalized/Denormalized/+-inf/nan
            Single Precision = IEEE 32bit
                Range (max/min) and Precision (number of bits)
            Double Precision = IEEE 64bit
            IO: How should we take input/output
                printf("%40.30e", x);
                    This is going to write out 30 characters which is far beyond 7bits.
                however printf("%12.8e", x); will output exactly the same value after reading it into a file then reading it back into program.
                    This is because the 8 bits doesnt go over what is available in a byte.
                    When saving into a txt file, each character is only 8bits (1 byte) so saving numbers larger than 8bits and reading from that file can lose data precision.
                        To avoid this problem, write out to a binary file.
        Write some code showing how to get these kinds of numbers.

Absolute Error vs Relative Error:
    Absolute: is abs(x_1-x_2) < e_a?
    Relative: (abs(x_1-x_2))/(abs(x_1)+abs(x_2)) < e_r
    
    Ex. 1.00000 and 1.0001
        e_a = 0.0001
        e_r = 0.0001/2 = 0.00005 (threw a 2 in denominator for some reason)
        Multiplying both errors by 10^5 changes this to e_a = 10 and e_r stays almost the same.
    
    Absolute shows if a number is the same and relative shows how many digits the number agrees to.

Floating point problems:
    if(0.1 + 0.1 + 0.1 == 0.3){}
    This will evaluate to true if we have infinite precision but since we are working with binary values, this can evaluate false.

    To convert radix point.
        2.1
            0.1 * 2 = 0.2
                * 2 = 0.4 and so on to get
                    0.2
                    0.4
                    0.8
                    1.6
                    1.2
                    0.
                    0.
                    1.
                    1.
                    .
                    .
                    .
        So taking the numbers left of the decimal places gives us
            10.0001100110011...
        Since this repeats indefinitely, we get a rounding problems.

Also want spikes for using sqrt with nan, inf, -inf, and so on.
Also want spikes for problems with floating points.

Spike for finding references for things like solving quadratic equation, IEEE formats, etc.
Spike "will i have problems rounding or bringing a value back to single precision?"
Spike for playing with input validation and testing.

Spikes are part of initial investigation and version is actual implementation.


TPS
WEEK 1                                                                                        | WEEK 2
Task                                                               Time Est     Risk    Who   | Time Est    % Complete      Review
----------------------------------------------------------------------------------------------|------------------------------------
IEEE fp:    Get references                                      |               |       |     |
IEEE fp:    Ranges and Precision                                |               |       |     |
gcc:        Decide which flags to use for programming standard  |               |       |     |
c:          Get C programming standards                         |               |       |     |
git:        Set up git repo                                     |               |       |     |