<?xml version="1.0"?>
<doc>
    <assembly>
        <name>a3</name>
    </assembly>
    <members>
        <member name="T:a3.Program">
            <summary>
            Main class. Only contains Main method.
            </summary>
        </member>
        <member name="M:a3.Program.Main(System.String[])">
            <summary>
            The only function of this method is to call the UI and Sort class constructors.
            It then prevents the program from automatically closing until the enter key is pressed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:a3.UI">
            <summary>
            This class handles all UI.
            Pretty much anything that writes to console gets put in here to prevent clutter in
            the other classes.
            </summary>
        </member>
        <member name="M:a3.UI.N">
            <summary>
            Requests input for number of elements to sort.
            Input comes in as string then is trimmed of excess spaces,
            validated, then returned as an int.
            </summary>
            <returns>Returns validated int</returns>
        </member>
        <member name="M:a3.UI.Name">
            <summary>
            Requests input for name to sort by. Input comes in as string, it trimmed of excess spaces, validated to
            verify no numbers exist, then returned.
            </summary>
            <returns>Returns validated string for name</returns>
        </member>
        <member name="M:a3.UI.LLHeader(System.Int32,System.String,System.String)">
            <summary>
            Simple output for UI to display a header before results.
            </summary>
            <param name="n">Number of elements to sort</param>
            <param name="name">User input name</param>
            <param name="search">New search order</param>
        </member>
        <member name="M:a3.UI.ArrHeader(System.Int32,System.String,System.String)">
            <summary>
            Same as LLHeader but for array results.
            </summary>
            <param name="n">Number of elements to sort</param>
            <param name="name">User input name</param>
            <param name="search">New search order</param>
        </member>
        <member name="M:a3.UI.LLUnsorted(a3.LL,System.String)">
            <summary>
            Prints unsorted list when number of elements is less than 26
            </summary>
            <param name="list">Unsorted list passed in from Sort class</param>
            <param name="s">Type of sort</param>
        </member>
        <member name="M:a3.UI.LLSorted(a3.LL)">
            <summary>
            Prints sorted list when number of elements is less than 26
            </summary>
            <param name="list">Sorted list passed in from Sort class</param>
        </member>
        <member name="M:a3.UI.ArrUnsorted(System.Char[],System.String)">
            <summary>
            Prints unsorted array when number of elements is less than 26
            </summary>
            <param name="arr">Unsorted array passed in from Sort class</param>
            <param name="s">Type of sort</param>
        </member>
        <member name="M:a3.UI.ArrSorted(System.Char[])">
            <summary>
            Prints sorted array when number of elements is less than 26
            </summary>
            <param name="arr">Sorted array passed in from Sort class</param>
        </member>
        <member name="M:a3.UI.ArrPrint(System.Char[])">
            <summary>
            Prints entire Array sorted or not.
            Used to offload work in ArrUnsorted and ArrSorted methods
            </summary>
            <param name="arr">Array passed in from ArrUnsorted/ArrSorted methods</param>
        </member>
        <member name="M:a3.UI.TotalTime(System.Double,System.Int32)">
            <summary>
            Method used to calculate and print total runtime.
            </summary>
            <param name="time">Accumulated milliseconds</param>
            <param name="loops">Number of loops. Used to divide time to get average runtime per loop</param>
        </member>
        <member name="T:a3.Sort">
            <summary>
            This class contains methods that initialize lists/arrays, sort them, and handles communication to UI.
            </summary>
        </member>
        <member name="M:a3.Sort.#ctor(System.Int32,System.String)">
            <summary>
            Main constructor of Sort class.
            Calls sorting methods in order with headers above each.
            </summary>
            <param name="n">Number of elements to sort</param>
            <param name="name">User input name</param>
        </member>
        <member name="M:a3.Sort.ListSorts">
            <summary>
            This method creates a new instance of LL(linked list) class.
            It then initializes this list, prints unsorted list, starts stopwatch, 
            sorts list, then calculate stopwatch time and prints sorted list.
            It does this process for each type of sort.
            </summary>
        </member>
        <member name="M:a3.Sort.ArraySorts">
            <summary>
            This method is similar to ListSorts with only a few variations.
            It creates a new char array, initializes it with new values, prints the unsorted list,
            starts stopwatch, sorts array, stops stopwatch, accumulates time, then prints sorted list.
            Again, this does these operations for each type of sort.
            </summary>
        </member>
        <member name="M:a3.Sort.LLInitialize(a3.LL)">
            <summary>
            This method inserts random characters into linked list.
            </summary>
            <param name="list">Passed in list from ListSorts method</param>
            <returns>Returns newly populated list</returns>
        </member>
        <member name="M:a3.Sort.ArrInitialize(System.Char[])">
            <summary>
            This method inserts random characters into array.
            This is nearly identical to LLInitialize.
            </summary>
            <param name="arr">Passed in array from ArraySorts method</param>
            <returns>Returns newly populated array</returns>
        </member>
        <member name="M:a3.Sort.CharValues">
            <summary>
            This method takes the user input name and outputs a string with that name at the front
            to be used to sort values.
            </summary>
            <returns>Returns new sorting string</returns>
        </member>
        <member name="M:a3.Sort.CharCompare(System.Char,System.Char)">
            <summary>
            This method compares two chars based on the new sorting string created in CharValues() method.
            This uses the index of the item in the new sorting string and compares it to the int index of
            the second char in that sorting string. It compares the int to determine which is greater/less.
            </summary>
            <param name="x">Char 1</param>
            <param name="y">Char 2</param>
            <returns>Returns int indicating if input 1 is greater/less/equal to input 2</returns>
        </member>
        <member name="M:a3.Sort.LLInsertion(a3.LL)">
            <summary>
            Linked List (LL) Insertion Sort
            </summary>
            <param name="list">list passed in from ListSorts method</param>
        </member>
        <member name="M:a3.Sort.LLBubble(a3.LL)">
            <summary>
            LL Bubble Sort
            </summary>
            <param name="list">list passed from ListSorts method</param>
        </member>
        <member name="M:a3.Sort.LLSelection(a3.LL)">
            <summary>
            LL Selection Sort
            </summary>
            <param name="list">list passed from ListSorts method</param>
        </member>
        <member name="M:a3.Sort.LLMerge(a3.LL,a3.LL,System.Int32,System.Int32)">
            <summary>
            LL Merge Sort
            </summary>
            <param name="list">list passed in from ListSorts</param>
            <param name="temp">temp list used only in this method. Originally passed in as empty.</param>
            <param name="left">Left index. Originally passed in as 1.</param>
            <param name="right">Right index. Originally passed in as list.Count</param>
        </member>
        <member name="M:a3.Sort.ArrInsertion(System.Char[])">
            <summary>
            Array Insertion Sort
            Same as LL implementation.
            </summary>
            <param name="arr">array passed in from ArraySorts</param>
        </member>
        <member name="M:a3.Sort.ArrBubble(System.Char[])">
            <summary>
            Array Bubble Sort
            Same as LL implementation.
            </summary>
            <param name="arr">array passed in from ArraySorts</param>
        </member>
        <member name="M:a3.Sort.ArrSelection(System.Char[])">
            <summary>
            Array Selection Sort
            Same as LL implementation.
            </summary>
            <param name="arr">array passed in from ArraySorts</param>
        </member>
        <member name="M:a3.Sort.ArrMerge(System.Char[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Array Merge Sort
            Same as LL implementation.
            </summary>
            <param name="arr">array passed in from ArraySorts</param>
            <param name="temp">Temp array used in this method. Originally passed in as new array.</param>
            <param name="left">Left index. Originally passed in as 0.</param>
            <param name="right">Right index. Originally passed in as arr.Count</param>
        </member>
        <member name="M:a3.Sort.Swap(System.Char@,System.Char@)">
            <summary>
            Swap method used to quickly swap two chars (A and B)
            </summary>
            <param name="a">Char A. Passed in as reference</param>
            <param name="b">Char B. Passed in as reference.</param>
        </member>
        <member name="T:a3.Node">
            <summary>
            Standard Node class used with LL class to created Singly Linked Lists
            </summary>
        </member>
        <member name="M:a3.Node.#ctor">
            <summary>
            Default constructor used to create null node
            </summary>
        </member>
        <member name="M:a3.Node.#ctor(a3.Node)">
            <summary>
            Constructor used to create node with specified Next node
            </summary>
            <param name="n">Node's .Next parameter</param>
        </member>
        <member name="M:a3.Node.#ctor(System.Char,a3.Node)">
            <summary>
            Constructor used to create node with specified data and Next node
            </summary>
            <param name="d">char d to be set in new node</param>
            <param name="n">Node's .Next parameter</param>
        </member>
        <member name="P:a3.Node.Data">
            <summary>
            Getter/Setter for Data
            </summary>
        </member>
        <member name="P:a3.Node.Next">
            <summary>
            Getter/Setter for Next
            </summary>
        </member>
        <member name="T:a3.LL">
            <summary>
            Linked List class containing methods for insert/delete/etc operations on Singly Linked List of Nodes
            </summary>
        </member>
        <member name="M:a3.LL.#ctor">
            <summary>
            Default constructor used to create new empty list with head, current, and tail pointers
            </summary>
        </member>
        <member name="M:a3.LL.Clear">
            <summary>
            Method used to clear entire list by setting head's next node to null. Not currently used.
            </summary>
        </member>
        <member name="M:a3.LL.Insert(System.Char)">
            <summary>
            Insert function that acts as an append since it only places new nodes at the tail.
            Faster than insert at x where x = list.count since it doesn't traverse through entire list.
            </summary>
            <param name="d">Data to be saved in new node</param>
        </member>
        <member name="M:a3.LL.Insert(System.Char,System.Int32)">
            <summary>
            Insert function allowing insertion at specified index.
            </summary>
            <param name="d">Data to be saved in new node</param>
            <param name="index">Index to place new node</param>
        </member>
        <member name="M:a3.LL.Replace(System.Char,System.Int32)">
            <summary>
            Replaces value at index with new value
            </summary>
            <param name="d">New value for node</param>
            <param name="index">Index to have value replaced</param>
        </member>
        <member name="M:a3.LL.Swap(System.Int32,System.Int32)">
            <summary>
            Method that swaps data between two nodes.
            </summary>
            <param name="index1">Index1 of node to swap</param>
            <param name="index2">Index2 of node to swap</param>
        </member>
        <member name="M:a3.LL.Delete(System.Int32)">
            <summary>
            Delete node at index x.
            </summary>
            <param name="index">Specified index to delete node from</param>
            <returns>Returns deleted char. Not currently used but is needed for stacks/queues</returns>
        </member>
        <member name="M:a3.LL.GetData(System.Int32)">
            <summary>
            Returns data at specified index
            </summary>
            <param name="index">Index of data needed</param>
            <returns>Return the char data at a specified index</returns>
        </member>
        <member name="M:a3.LL.Print">
            <summary>
            Method used to print entire list to console.
            </summary>
        </member>
        <member name="M:a3.LL.GoToIndex(a3.Node,System.Int32)">
            <summary>
            Method used just to move a specified pointer to a specific index.
            This method is used by nearly every method in the LL class
            as a way to offload the work of taversing the list and to
            make the code a bit cleaner.
            </summary>
            <param name="pointer">Node pointer that needs to be moved</param>
            <param name="index">Specified index to move to</param>
            <returns>Returns the pointer that is being moved</returns>
        </member>
        <member name="M:a3.LL.Count">
            <summary>
            Simple method that returns the number of elements in the list.
            </summary>
            <returns>Returns an integer count of number of elements in list.</returns>
        </member>
    </members>
</doc>
