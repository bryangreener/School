import unittest

class bookshop:
    def m1(orderList):
        #t = list(map(lambda x: tuple([x[0], if_else(x[1]*x[2] < 100, x[1]*x[2] + 10, x[1]*x[2])]), orderList))
        #return(list(map(lambda x: [x[0]] + t, orderList)))
        return(list(map(lambda x: [x[0]] + list(map(lambda y: tuple([y[0], y[1]*y[2] if y[1]*y[2] >= 100 else y[1]*y[2] + 10]), x[1:])), orders)))

class testBookshop(unittest.TestCase):
    orders = [ [1, ("5464", 4, 9.99), ("8274",18,12.99), ("9744", 9, 44.95)],
               [2, ("5464", 9, 9.99), ("9744", 9, 44.95)],
               [3, ("5464", 9, 9.99), ("88112", 11, 24.99)],
               [4, ("8732", 7, 11.99), ("7733", 11,18.99), ("88112", 5, 39.95)] ]
    def tm1(self):
        self.assertEqual(bookshop.m1(orders), [ [1, ("5464", 49.96), ("8274",233.82), ("9744", 404.55)],
               [2, ("5464", 99.91), ("9744", 9, 404.55)],
               [3, ("5464", 99.91), ("88112", 274.89)],
               [4, ("8732", 93.93), ("7733", 208.89), ("88112", 199.75)] ])

orders = [ [1, ("5464", 4, 9.99), ("8274",18,12.99), ("9744", 9, 44.95)],
               [2, ("5464", 9, 9.99), ("9744", 9, 44.95)],
               [3, ("5464", 9, 9.99), ("88112", 11, 24.99)],
               [4, ("8732", 7, 11.99), ("7733", 11,18.99), ("88112", 5, 39.95)] ]
print(bookshop.m1(orders))

if __name__ == "__main__":
    unittest.main()
