DAA Notes 2018-01-16

One way of expressing runtime:
    On any input of size n, the algorithm runs for almost (1.62n^2 + 3.5n + 8) steps.

Getting precise statements is an exhaustive activity.

Asymptotic Upper Bound
Let T(n) be a function that represents the worst-case runtime of a certain algorithm of input size n.
    Let T(n) is O(f(n)) for sufficiently large n.
    T(n) is bounded above by a constant multiple of f(n). T(n) = O(f(n)).
    T(n) is O(f(n)) if there exists a constant C > 0 and n >= 0 such that for all n >= n.
    We have T(n) <= C*f(n)

    Example:    Express upperbounds on runtime of an algorithm that has the form T(n) = pn^2 + qn + r.
                p, r, q > 0.
    Claim:  Any such function is O(n^2).
    Proof:  For all n >= 1, we have qn <= q(n^2) and r <= r(n^2).
            Then T(n) = pn^2 + qn + r <= pn^2 + qn^2 + rn^2 = n^2(p + q + r) for all n >= 1
            T(n) <= Cn^2 where C = p + q + r

Asymptotic Lower Bound
For an arbitrarily large n, the function T(n) is at least a constant multiple of some function of f(n).
    T(n) is OMEGA(f(n)) if there exists a constant e > 0, n(0) >= 0 for all n >= n(0). T(n) >= e*f(n).

    Example:    T(n) = pn^2 + qn + r. p, q, r >= 0.
    Claim:  T(n) = OMEGA(n^2)
    Proof:  For all n >= 0, T(n) = pn^2 + qn + r >= pn^2 which meets the requirement OMEGA() with e = p >= 0.
            We need to show that reduce the T(n) until it looks likke constant time n^2.
            Weaker upper bound T(n) = pn^2 + qn + r is OMEGA(n).

Asymptotic Tight Bound
Show that algorithm T(n) is both O(f(n)) and OMEGA(f(n)), then we have found the right bound. 
    T(n) = THETA(f(n))

Properties of Asymptotic Growth Rate
Transitivity
    a)  IF f = O(g) and g = O(h) then f = O(h)
    b)  IF f = OMEGA(g) and g = OMEGA(h) then f = OMEGA(h)
    c)  IF f = THETA(g) and g = THETA(h) then f = THETA(h)
    d)  f and g are two functions. f = O(h) and g = O(h), f + g = O(h)

Example Problems
Statement of the Problem:
    Find a peak if it exists.
    1-D array
        a b c d e f g h i
        1 2 3 4 5 6 7 8 9

        a -> i number (+VE, -VE, or 0)
        Find a peak.
            Position 2 is a peak iff b >= a and b >= c.
            First and last position cannot be a peak
        Algorithm:
            for(int i = 1; i < arraylength -2; i++)
                if i.value >= i-1.value && i.value >= i+1.value
                    return i.value // this is a peak
        OMEGA(1)
        THETA(n)
        O(n)


Mutually Compatible Jobs
    In a series of jobs, the jobs that do not overlap.
    Goal: Find maximum cardinality subset of mutually compatible jobs.
Weighted Interval Scheduling
    INput: Set of jobs with start/finish times and weights.
    Goal: Find max weight subset of mutually compatible jobs.
Bipartite Matching
    Problem: Given a bipartite graph G=(L UNION R, E) find a max cardinality matching.
    Def: A subset of edges M SUB E is a matching if each node appears in exactly one edge in M.

            